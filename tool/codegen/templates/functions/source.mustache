// Copyright (c) 2016, Herman Bergwerf. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

#include "{{{ name }}}.hpp"

namespace fldart {
namespace {{{ name }}} {
{{# functions }}

void {{{ name }}}(Dart_NativeArguments arguments) {
  {{! Local variables }}
  {{# args }}
  {{{ type }}} {{{ name }}};
  {{/ args }}
  {{! Enter new Dart scope }}
  Dart_EnterScope();
  {{! Resolve input variables}}
  {{# args }}
  {{# simpleconv }}
  HandleError({{{ conv }}}(HandleError(Dart_GetNativeArgument(arguments, {{{ argi }}})), {{{ convargs }}}));
  {{/ simpleconv }}
  {{# uint8listconv }}
  void **_arg{{{ argi }}}_data;
  Dart_TypedData_Type *_arg{{{ argi }}}_type = new Dart_TypedData_Type(Dart_TypedData_Type::Dart_TypedData_kUint8);
  Dart_Handle _arg{{{ argi }}}_handle = HandleError(Dart_GetNativeArgument(arguments, {{{ argi }}}));
  int64_t _arg{{{ argi }}}_length;
  HandleError(Dart_ListLength(_arg{{{ argi }}}_handle, &_arg{{{ argi }}}_length));
  HandleError(Dart_TypedDataAcquireData(_arg{{{ argi }}}_handle, _arg{{{ argi }}}_type, _arg{{{ argi }}}_data, &_arg{{{ argi }}}_length));
  HandleError(Dart_TypedDataReleaseData(_arg{{{ argi }}}_handle));
  {{{ name }}} = (uint8_t*)*_arg{{{ argi }}}_data;
  {{/ uint8listconv }}
  {{/ args }}
  {{! Execute the function call }}
  {{{ call }}};
  {{! Resolve return value }}
  Dart_Handle result = {{{ return }}};
  Dart_SetReturnValue(arguments, result);
  Dart_ExitScope();
}
{{/ functions }}
}
}
