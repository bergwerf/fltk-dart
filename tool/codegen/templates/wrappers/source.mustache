// Copyright (c) 2016, Herman Bergwerf. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

#include "{{{ class }}}_Wrapper.hpp"

namespace fldart {
{{# constructors }}
{{{ class }}}_Wrapper::{{{ class }}}_Wrapper(Dart_Handle ref, {{{ argsdef }}}) : {{{ class }}}({{{ argslist }}}) {
  _ref = Dart_NewPersistentHandle(ref);
  callback(callback_wrapper, &_ref);
}

{{/ constructors }}
{{# drawfn }}
void {{{ class }}}_Wrapper::draw() {
  HandleError(Dart_Invoke(_ref, Dart_NewStringFromCString("draw"), 0, {}));
}

{{/ drawfn }}
void {{{ class }}}_Wrapper::resize(int x, int y, int w, int h) {
  {{{ class }}}::resize(x, y, w, h);
  Dart_Handle args[4] = {
    Dart_NewInteger((int64_t)x),
    Dart_NewInteger((int64_t)y),
    Dart_NewInteger((int64_t)w),
    Dart_NewInteger((int64_t)h)
  };
  HandleError(Dart_Invoke(_ref, Dart_NewStringFromCString("resize"), 4, args));
}

int {{{ class }}}_Wrapper::handle(int event) {
  int superRet = {{{ class }}}::handle(event);
  Dart_Handle args[1] = { Dart_NewInteger((int64_t)event) };
  Dart_Handle ret = HandleError(Dart_Invoke(_ref, Dart_NewStringFromCString("doHandle"), 1, args));
  int64_t returnValue;
  Dart_IntegerToInt64(ret, &returnValue);
  return returnValue == 0 ? superRet : returnValue;
}

void {{{ class }}}_Wrapper::callback_wrapper(Fl_Widget*, void *ptr) {
  Dart_PersistentHandle *ref = (Dart_PersistentHandle*)ptr;
  HandleError(Dart_Invoke(*ref, Dart_NewStringFromCString("doCallback"), 0, {}));
}
}
