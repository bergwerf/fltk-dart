// Copyright (c) 2016, Herman Bergwerf. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

#include "{{{ dartname }}}.hpp"
{{# sourceInclude }}
#include "{{{ . }}}"
{{/ sourceInclude }}

namespace fldart {
namespace {{{ dartname }}} {
{{# constructors }}

void constructor_{{{ dartname }}}{{{ name }}}(Dart_NativeArguments arguments) {
  {{! Local variables }}
  {{{ targetClass }}} *instance;
  Dart_Handle _ref;
  {{# args }}
  {{{ type }}} {{{ name }}};
  {{/ args }}
  {{! Enter new Dart scope }}
  Dart_EnterScope();
  {{! Resolve variables }}
  _ref = HandleError(Dart_GetNativeArgument(arguments, 0));
  {{# args }}
  HandleError({{{ conv }}}(HandleError(Dart_GetNativeArgument(arguments, {{{ argi }}})), &{{{ name }}}));
  {{/ args }}
  {{! Create instance }}
  instance = new {{{ targetClass }}}({{{ argslist }}});
  Dart_SetNativeInstanceField(_ref, 0, (intptr_t)instance);
  {{! Return instance memory address }}
  Dart_Handle _ret = Dart_Null();
  Dart_SetReturnValue(arguments, _ret);
  Dart_ExitScope();
}
{{/ constructors }}
{{# methods }}

void {{{ name }}}(Dart_NativeArguments arguments) {
  {{! Local variables }}
  intptr_t ptr;
  {{{ targetClass }}} *_ref;
  {{# args }}
  {{{ type }}} {{{ name }}};
  {{/ args }}
  {{! Enter new Dart scope }}
  Dart_EnterScope();
  {{! Resolve class instance reference from memory address }}
  HandleError(Dart_GetNativeInstanceField(HandleError(Dart_GetNativeArgument(arguments, 0)), 0, &ptr));
  _ref = ({{{ targetClass }}}*)ptr;
  {{! Resolve other method arguments }}
  {{# args }}
  {{# simpleconv }}
  HandleError({{{ conv }}}(HandleError(Dart_GetNativeArgument(arguments, {{{ argi }}})), {{{ convargs }}}));
  {{/ simpleconv }}
  {{# uint8listconv }}
  void **_arg{{{ argi }}}_data;
  Dart_TypedData_Type *_arg{{{ argi }}}_type = new Dart_TypedData_Type(Dart_TypedData_Type::Dart_TypedData_kUint8);
  Dart_Handle _arg{{{ argi }}}_handle = HandleError(Dart_GetNativeArgument(arguments, {{{ argi }}}));
  int64_t _arg{{{ argi }}}_length;
  HandleError(Dart_ListLength(_arg{{{ argi }}}_handle, &_arg{{{ argi }}}_length));
  HandleError(Dart_TypedDataAcquireData(_arg{{{ argi }}}_handle, _arg{{{ argi }}}_type, _arg{{{ argi }}}_data, &_arg{{{ argi }}}_length));
  HandleError(Dart_TypedDataReleaseData(_arg{{{ argi }}}_handle));
  {{{ name }}} = (uint8_t*)*_arg{{{ argi }}}_data;
  {{/ uint8listconv }}
  {{/ args }}
  {{! Run method call }}
  {{{ call }}};
  {{! Get return value and return }}
  Dart_Handle _ret = {{{ return }}};
  Dart_SetReturnValue(arguments, _ret);
  Dart_ExitScope();
}
{{/ methods }}
}
}
